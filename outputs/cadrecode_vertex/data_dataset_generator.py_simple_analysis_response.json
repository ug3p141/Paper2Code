[{"choices": [{"message": {"role": "assistant", "content": "# Logic Analysis: data/dataset_generator.py\n\n## Overview\nThe `data/dataset_generator.py` module implements the procedural dataset generation pipeline that creates 1 million CAD sequences as CadQuery Python code. This is a critical component that addresses the data limitation mentioned in the paper by providing controlled generation of diverse CAD models with specific features and design patterns.\n\n## Core Requirements from Paper\n\n### 1. Algorithm Implementation\n- **Algorithm 1 (Generate2DSketch)**: Creates 2D sketches by combining 3-8 primitive shapes (circles, rotated rectangles) through boolean operations (union, cut)\n- **Algorithm 2 (GenerateCAD)**: Generates 3D CAD models by extruding sketches on random planes and combining through union operations\n- **Validation Framework**: Ensures syntactic (\u03c6_syn) and CAD-specific (\u03c6_cad) validity of generated code\n\n### 2. Dataset Characteristics\n- **Size**: 1 million unique CAD sequences\n- **Parameter Quantization**: Coordinates in range [-100, 100] with resolution 1\n- **Normalization**: Models fit within unit bounding box\n- **Modularity**: Incorporates reuse of design elements, abstraction to higher-level shapes\n- **Uniqueness**: Duplicate detection to ensure each sample is unique\n\n## Class Design Analysis\n\n### DatasetGenerator Class\n\n#### Initialization Logic\n```python\ndef __init__(self, config: dict):\n```\n**Purpose**: Initialize generator with configuration parameters\n**Key Responsibilities**:\n- Store configuration from `config.yaml` (coordinate ranges, resolution, primitive counts)\n- Initialize random seed for reproducibility\n- Set up validation components\n- Configure output paths and logging\n\n**Configuration Dependencies**:\n- `data.procedural_dataset.size` (1M samples)\n- `data.procedural_dataset.num_primitives_range` ([3, 8])\n- `data.procedural_dataset.coordinate_range` ([-100, 100])\n- `data.procedural_dataset.coordinate_resolution` (1)\n\n#### Core Generation Methods\n\n#### 1. generate_sketch() Method\n```python\ndef generate_sketch() -> dict:\n```\n**Purpose**: Implements Algorithm 1 from the paper\n**Logic Flow**:\n1. **Primitive Count Selection**: Randomly choose 3-8 primitives per sketch\n2. **Shape Generation Loop**:\n   - Randomly select primitive type (Circle, RotatedRectangle)\n   - Generate random parameters within quantized ranges\n   - Select boolean operation (Union for addition, Cut for subtraction)\n   - Apply operation to composite shape\n3. **Boundary Extraction**:\n   - Extract boundary loops from composite shape\n   - Analyze each loop to get parametric curves (lines, arcs, circles)\n   - Determine inner/outer loop classification\n4. **Validation**:\n   - Ensure loops don't intersect\n   - Verify each primitive has length > 0\n   - Check topological validity\n\n**Return Structure**:\n```python\n{\n    'boundary_components': List[Tuple[List[curve], bool]],  # (edges, is_outer)\n    'primitives_used': List[str],  # Track primitive types\n    'parameters': dict  # Store generation parameters\n}\n```\n\n**Key Considerations**:\n- **Quantization**: All coordinates must be integers in [-100, 100] range\n- **Geometric Validity**: Ensure shapes are closed and non-degenerate\n- **Modularity**: Track reusable elements (centers, radii) for later abstraction\n\n#### 2. generate_cad_model() Method\n```python\ndef generate_cad_model() -> str:\n```\n**Purpose**: Implements Algorithm 2 from the paper\n**Logic Flow**:\n1. **Initialization**:\n   - Create empty CAD model structure\n   - Generate random reference planes (canonical planes with random translations)\n2. **Sketch Processing Loop**:\n   - Generate multiple sketches using `generate_sketch()`\n   - Assign each sketch to a random plane\n   - Create extrusion parameters (random heights)\n3. **3D Volume Creation**:\n   - Extrude each sketch to create 3D volumes\n   - Apply boolean union operations to combine volumes\n4. **Model Finalization**:\n   - Normalize model to unit bounding box\n   - Apply parameter quantization\n   - Perform code simplification (abstract to higher-level shapes)\n5. **Code Generation**:\n   - Convert geometric operations to CadQuery Python syntax\n   - Ensure proper import statements and structure\n\n**Code Structure Template**:\n```python\n# Generated code follows consistent pattern:\nimport cadquery as cq\nw0 = cq.Workplane('XY', origin=(x, y, z))\nr = w0.sketch()...operations...finalize().extrude(height)\n.union(w0.sketch()...operations...finalize().extrude(height))\n```\n\n**Simplification Logic**:\n- **Rectangle Detection**: Four-line closed loops \u2192 `rect()` abstraction\n- **Box Detection**: Rectangle + extrusion \u2192 `box()` abstraction  \n- **Cylinder Detection**: Circle + extrusion \u2192 `cylinder()` abstraction\n- **Variable Reuse**: Common coordinates, radii, heights as shared variables\n\n#### 3. validate_code() Method\n```python\ndef validate_code(code: str) -> bool:\n```\n**Purpose**: Ensure generated code meets \u03c6_syn and \u03c6_cad criteria\n**Validation Steps**:\n1. **Syntax Validation (\u03c6_syn)**:\n   - Parse Python AST to check syntax correctness\n   - Verify import statements and variable declarations\n   - Check expression and statement structure\n2. **CadQuery Validation (\u03c6_cad)**:\n   - Verify CadQuery library syntax compliance\n   - Check method call chains and parameter validity\n   - Ensure geometric operations are properly sequenced\n3. **Geometric Validation**:\n   - Execute code in isolated environment\n   - Use BRepCheck Analyzer (from PythonOCC) as mentioned in paper\n   - Verify resulting model is geometrically valid\n   - Check that extrusions apply only to closed loops\n   - Ensure no negative radii or invalid parameters\n4. **Execution Safety**:\n   - Timeout protection (30 seconds from config)\n   - Error handling for runtime exceptions\n   - Memory usage monitoring\n\n#### 4. generate_dataset() Method\n```python\ndef generate_dataset(size: int) -> List[dict]:\n```\n**Purpose**: Orchestrate generation of complete dataset\n**Logic Flow**:\n1. **Setup**:\n   - Initialize progress tracking\n   - Set up duplicate detection mechanism\n   - Prepare output storage\n2. **Generation Loop**:\n   - Generate CAD model code using `generate_cad_model()`\n   - Validate code using `validate_code()`\n   - Check for duplicates using duplicate detection protocol\n   - If valid and unique, add to dataset\n   - Continue until target size reached\n3. **Progress Management**:\n   - Log generation progress every 1000 samples\n   - Handle generation failures gracefully\n   - Maintain statistics on success/failure rates\n4. **Output Preparation**:\n   - Save generated codes to files\n   - Create point clouds by executing codes and sampling surfaces\n   - Prepare dataset in format compatible with DataLoader\n\n**Dataset Sample Structure**:\n```python\n{\n    'code': str,  # CadQuery Python code\n    'point_cloud': np.ndarray,  # Sampled points from executed model\n    'metadata': {\n        'primitives_count': int,\n        'operations_count': int,\n        'complexity_score': float,\n        'generation_timestamp': str\n    }\n}\n```\n\n## Key Implementation Considerations\n\n### 1. Randomization Strategy\n- **Deterministic Seeding**: Support reproducible generation for research\n- **Parameter Distributions**: \n  - Uniform distribution for coordinates within quantized range\n  - Gaussian distribution for sizes/radii with clipping\n  - Discrete uniform for primitive counts (3-8)\n\n### 2. Geometric Constraints\n- **Minimum Feature Size**: Ensure features are larger than quantization resolution\n- **Aspect Ratio Limits**: Prevent extremely thin or flat shapes\n- **Intersection Handling**: Manage complex boolean operations carefully\n- **Plane Selection**: Balance between canonical planes (XY, XZ, YZ) and translated variants\n\n### 3. Code Quality and Modularity\n- **Variable Naming**: Consistent naming conventions (w0, w1 for workplanes)\n- **Code Formatting**: Proper indentation and line breaks\n- **Comment Generation**: Optional comments for complex operations\n- **Modular Patterns**: Reuse of common coordinates and parameters\n\n### 4. Performance Optimization\n- **Batch Processing**: Generate multiple models before validation\n- **Caching**: Cache validated primitives and operations\n- **Parallel Generation**: Support multi-process generation for large datasets\n- **Memory Management**: Clear intermediate geometric objects\n\n### 5. Error Handling and Robustness\n- **Graceful Failures**: Continue generation despite individual failures\n- **Validation Timeouts**: Prevent hanging on complex geometric operations\n- **Resource Monitoring**: Track memory and CPU usage\n- **Recovery Mechanisms**: Retry failed generations with different parameters\n\n### 6. Duplicate Detection Protocol\n- **Code Hashing**: Use content-based hashing for duplicate detection\n- **Geometric Comparison**: Compare resulting geometries for near-duplicates\n- **Parameter Normalization**: Account for equivalent parameter representations\n- **Efficiency**: Use efficient data structures (sets, bloom filters) for large-scale detection\n\n## Integration Points\n\n### Dependencies\n- **utils/cad_validation.py**: For \u03c6_syn and \u03c6_cad validation functions\n- **cadquery**: For code execution and geometric operations\n- **numpy**: For numerical operations and array handling\n- **random**: For controlled randomization\n\n### Configuration Integration\n- Read all parameters from `config.yaml` via `config.data.procedural_dataset`\n- Support runtime parameter adjustment for ablation studies\n- Maintain backward compatibility with different configuration versions\n\n### Output Format\n- Generate dataset compatible with `data/dataset_loader.py`\n- Support multiple output formats (JSON, pickle, HDF5)\n- Include comprehensive metadata for analysis and debugging\n\nThis comprehensive logic analysis provides the foundation for implementing a robust, scalable, and paper-compliant procedural dataset generator that will create the 1 million CAD sequences needed to train CAD-Recode effectively."}}], "usage": {"input_tokens": 32478, "output_tokens": 2463, "total_tokens": 34941}}]